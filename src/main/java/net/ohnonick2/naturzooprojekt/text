 @Bean
    CommandLineRunner initDatabase() {
        return args -> {

            Ort ort = new Ort(123457, "Testort");
            ortrepository.save(ort);

            LocalDate geburtsdatum = LocalDate.of(2021, 1, 1);

            TierArt tierArt = new TierArt("Elefant");
            tierartrepository.save(tierArt);
            Date date = new Date();
            LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            Tier tier = new Tier("Hans",   geburtsdatum , null , null, TierGeschlecht.MAENNLICH, tierArt);
            Tier eli = new Tier("ELI" , geburtsdatum , null , null , TierGeschlecht.MAENNLICH , tierArt);
            tierrespository.save(tier);



            BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();
            String encodedPassword = bCryptPasswordEncoder.encode("test");




            Pfleger pfleger = new Pfleger("Hans", "Müller", encodedPassword, localDate  , ort);

            pflegerrepository.save(pfleger);



            FutterPlan futterplan = new FutterPlan("Testttt");
            futterplanRepository.save(futterplan);

            FutterPlanTier futterPlanTier = new FutterPlanTier(futterplan, tier);
            FutterPlanTier futterPlanTier1 = new FutterPlanTier(futterplan , eli);

            futterPlanTierRepositority.save(futterPlanTier);

            Adresse adresse = new Adresse("Teststraße", "12345", ort);
            adresseRepository.save(adresse);


            Lieferant lieferant = new Lieferant("Hans GmbH" , adresse , "12345" , "Hans");
            lieferantRepository.save(lieferant);

            Futter futter = new Futter("Heu", 10, lieferant);
            futterRepositority.save(futter);

            FutterZeit futterZeit = new FutterZeit("12:00");
            futterZeitRepository.save(futterZeit);

            FutterPlanFutterZeit futterPlanFutterZeit = new FutterPlanFutterZeit(futterZeit, futterplan);

            futterPlanFutterZeitRepository.save(futterPlanFutterZeit);


            Wochentag wochentag = new Wochentag("Montag");
            Wochentag wochentag1 = new Wochentag("Dienstag");
            Wochentag wochentag2 = new Wochentag("Mittwoch");
            Wochentag wochentag3 = new Wochentag("Donnerstag");
            Wochentag wochentag4 = new Wochentag("Freitag");
            Wochentag wochentag5 = new Wochentag("Samstag");
            Wochentag wochentag6 = new Wochentag("Sonntag");

            wochentagRepository.save(wochentag);
            wochentagRepository.save(wochentag1);
            wochentagRepository.save(wochentag2);
            wochentagRepository.save(wochentag3);
            wochentagRepository.save(wochentag4);
            wochentagRepository.save(wochentag5);
            wochentagRepository.save(wochentag6);

            FutterPlanWochentag futterPlanWochentag = new FutterPlanWochentag(futterplan , wochentag);
            futterPlanWochentagRepository.save(futterPlanWochentag);

            Revier revier = new Revier("Testrevier");
            revierRepository.save(revier);

            RevierTier revierTier = new RevierTier(revier, tier);
            revierTierRespository.save(revierTier);


            Rolle superAdmin = new Rolle("SuperAdmin");
            Rolle rolle = new Rolle("Admin");
            Rolle rolle2 = new Rolle("Pfleger");

            permissionRepository.saveAll(Arrays.asList(
                    new Permission("FUTTERPLAN_MANAGEMENT_READ", "Zugriff auf das Anzeigen von Futterplänen"),
                    new Permission("FUTTERPLAN_MANAGEMENT_WRITE", "Zugriff auf das Bearbeiten von Futterplänen"),
                    new Permission("FUTTER_MANAGEMENT_READ", "Zugriff auf das Anzeigen von Futterverwaltung"),
                    new Permission("FUTTER_MANAGEMENT_WRITE", "Zugriff auf das Bearbeiten von Futterverwaltung"),
                    new Permission("USER_MANAGEMENT_READ", "Zugriff auf die Benutzerverwaltung (lesen)"),
                    new Permission("USER_MANAGEMENT_WRITE", "Zugriff auf die Benutzerverwaltung (bearbeiten)"),
                    new Permission("REVIER_READ", "Zugriff auf die Revierverwaltung (lesen)"),
                    new Permission("REVIER_WRITE", "Zugriff auf die Revierverwaltung (bearbeiten)"),
                    new Permission("TIER_READ", "Zugriff auf die Tierverwaltung (lesen)"),
                    new Permission("TIER_WRITE", "Zugriff auf die Tierverwaltung (bearbeiten)"),
                    new Permission("LIEFERANT_READ", "Zugriff auf Lieferanteninformationen (lesen)"),
                    new Permission("LIEFERANT_WRITE", "Zugriff auf Lieferanteninformationen (bearbeiten)"),
                    new Permission("ROLE_MANAGEMENT_READ", "Zugriff auf die Rollenverwaltung (lesen)"),
                    new Permission("ROLE_MANAGEMENT_WRITE", "Zugriff auf die Rollenverwaltung (bearbeiten)"),
                    new Permission("*", "Zugriff auf alles")
            ));



            rolleRepository.save(superAdmin);
            rolleRepository.save(rolle);
            rolleRepository.save(rolle2);

            Permission sternchen = permissionRepository.findPermissionByPermission("*");
            Permission futterplanRead = permissionRepository.findPermissionByPermission("FUTTERPLAN_MANAGEMENT_READ");
            Permission futterplanWrite = permissionRepository.findPermissionByPermission("FUTTERPLAN_MANAGEMENT_WRITE");


            PermissionRolle permissionRolle = new PermissionRolle(sternchen , superAdmin);
            PermissionRolle permissionRolle1 = new PermissionRolle(futterplanRead , rolle);
            PermissionRolle permissionRolle2 = new PermissionRolle(futterplanWrite , rolle);

            permissionRolleRepository.save(permissionRolle);
            permissionRolleRepository.save(permissionRolle1);
            permissionRolleRepository.save(permissionRolle2);






            RolleUser rolleUser = new RolleUser(rolle2 , pfleger);


            rolleUserRepository.save(rolleUser);









        };

    }
